'''
Run moran's i on node_info data.
(generated by summarize-node-properties scripot)
'''

import argparse
import os
import networkx as nx
import utilities as utils
import graph_utilities as gutils
import statistics as stats
import copy
import sys
import pathlib

# Add network_correlation directory to path
sys.path.append(
    os.path.join(
        pathlib.Path(os.path.dirname(os.path.abspath(__file__))).parents[0],
        "third-party",
        "network_correlation"
    )
)
import stats as gstats

node_info_fields = [
    "actual_births_mean",
    "actual_births_prop",
    "all_task_prop"
]

def main():
    parser = argparse.ArgumentParser(description="Screen for hotspots")
    parser.add_argument("--node_info_dir", type=str, help="Data containing summarized node info (produced by summarize-node-properties script)")
    parser.add_argument("--graphs_dir", type=str, help="Path to directory containing relevant graphs")
    parser.add_argument("--dump_dir", type=str, default=".", help="Where to write output files")

    args = parser.parse_args()
    node_info_dir = args.node_info_dir
    graphs_dir = args.graphs_dir
    dump_dir = args.dump_dir

    if not os.path.isdir(node_info_dir):
        print(f"Failed to find node info directory: {node_info_dir}")
        exit(-1)

    if not os.path.isdir(graphs_dir):
        print(f"Failed to find graphs directory: {graphs_dir}")
        exit(-1)

    utils.mkdir_p(dump_dir)

    # Identify node info files
    node_info_files = [f for f in os.listdir(node_info_dir) if f.startswith("node_info")]
    print(f"Found {len(node_info_files)} node info files.")

    # Identify, load all relevant graph files
    # graphs = {}
    output_content = []
    for node_info_file in node_info_files:
        output_info = {}
        graph_name = node_info_file.replace("node_info_", "")
        graph_fname = graph_name.replace(".csv", ".mat")
        graph_path = os.path.join(graphs_dir, graph_fname)
        if not os.path.isfile(graph_path):
            print(f"Failed to find graph {graph_path}, skipping.")
            continue
        graph = gutils.read_graph_matrix(graph_path)

        # Process node info for this graph (annotate graph)
        node_info_path = os.path.join(node_info_dir, node_info_file)
        node_data = utils.read_csv(node_info_path)
        for node_info in node_data:
            loc_id = int(node_info["loc_id"])
            # annotate this location
            for field in node_info_fields:
                graph.nodes[loc_id][field] = float(node_info[field])
        # Graph is annotated, so we can run statistics.
        for field in node_info_fields:
            result = gstats.moran(
                graph,
                name = field,
                alt = "greater",
                Np = 100,
                drop_weights = False
            )
            moran_i = result[0]
            moran_p = result[1]
            output_info[f"{field}_moran_i"] = moran_i
            output_info[f"{field}_p_val"] = moran_p
        output_info["graph"] = graph_name
        output_content.append(output_info)
    utils.write_csv(
        os.path.join(dump_dir, "summarized_graphs_morans_i.csv"),
        output_content
    )

if __name__ == "__main__":
    main()